/*The four adjacent digits in the 1000-digit number that have the
 * greatest product are 9 × 9 × 8 × 9 = 5832.

 * 73167176531330624919225119674426574742355349194934
 * 96983520312774506326239578318016984801869478851843
 * 85861560789112949495459501737958331952853208805511
 * 12540698747158523863050715693290963295227443043557
 * 66896648950445244523161731856403098711121722383113
 * 62229893423380308135336276614282806444486645238749
 * 30358907296290491560440772390713810515859307960866
 * 70172427121883998797908792274921901699720888093776
 * 65727333001053367881220235421809751254540594752243
 * 52584907711670556013604839586446706324415722155397
 * 53697817977846174064955149290862569321978468622482
 * 83972241375657056057490261407972968652414535100474
 * 82166370484403199890008895243450658541227588666881
 * 16427171479924442928230863465674813919123162824586
 * 17866458359124566529476545682848912883142607690042
 * 24219022671055626321111109370544217506941658960408
 * 07198403850962455444362981230987879927244284909188
 * 84580156166097919133875499200524063689912560717606
 * 05886116467109405077541002256983155200055935729725
 * 71636269561882670428252483600823257530420752963450
 * 
 * Find the thirteen adjacent digits in the 1000-digit number that have
 * the greatest product. What is the value of this product?
 */

/*
 * multiplyInts takes in a string of integers and returns the product
 * of those integers as a number.
 *
 * @param the string of integers
 *
 * @return the product as a number
 */
function multiplyInts(intString) {
	var index, product;
	product = 1;
	
	//if there's a 0 in the string immediately return 0
	if (intString.indexOf("0") > -1)
		return 0;
	
	//else multiply the integers
	for (index = 0; index < intString.length; index++) {
		product *= Number(intString.charAt(index));
	}

	return product;
}

/*
 * greatestProduct takes in a series of digits in the form of a
 * continuous string. The function returns the greatest product
 * of adjacent integers contained in the string, multiplying the
 * number of integers passed in as the 2nd argument at a time.
 *
 * @param the string of integers
 * @param the number of adjacent integers to multiply in sequence
 *
 * @return the greatest product
 */
function greatestProduct(numString, finalLength) {
	//create array of every number combination to be tested
	var index, productsArray, thisString;
	productsArray = [];

	for (index = 0; index <= numString.length - finalLength; index++) {
		thisString = numString.slice(index, index + finalLength);
		productsArray.push(multiplyInts(thisString));
	}

	return productsArray.reduce(function (num1, num2) {
		return Math.max(num1, num2);
		});
}

var theString =
	  '73167176531330624919225119674426574742355349194934'
	+ '96983520312774506326239578318016984801869478851843'
	+ '85861560789112949495459501737958331952853208805511'
	+ '12540698747158523863050715693290963295227443043557'
	+ '66896648950445244523161731856403098711121722383113'
	+ '62229893423380308135336276614282806444486645238749'
	+ '30358907296290491560440772390713810515859307960866'
	+ '70172427121883998797908792274921901699720888093776'
	+ '65727333001053367881220235421809751254540594752243'
	+ '52584907711670556013604839586446706324415722155397'
	+ '53697817977846174064955149290862569321978468622482'
	+ '83972241375657056057490261407972968652414535100474'
	+ '82166370484403199890008895243450658541227588666881'
	+ '16427171479924442928230863465674813919123162824586'
	+ '17866458359124566529476545682848912883142607690042'
	+ '24219022671055626321111109370544217506941658960408'
	+ '07198403850962455444362981230987879927244284909188'
	+ '84580156166097919133875499200524063689912560717606'
	+ '05886116467109405077541002256983155200055935729725'
	+ '71636269561882670428252483600823257530420752963450';

console.log(greatestProduct(theString, 13));
